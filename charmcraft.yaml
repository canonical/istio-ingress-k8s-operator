name: istio-ingress-k8s
type: charm
title: Istio Ingress
summary: A Juju charm to deploy and manage ingresses
description: |
  Istio Ingress is a Juju charm for managing Istio ingress gateways in Kubernetes clusters.
  It automates deployment and configuration, providing secure and reliable traffic routing.
assumes:
  - k8s-api

platforms:
  ubuntu@24.04:amd64:
  ubuntu@24.04:arm64:

parts:
  charm:
    source: .
    plugin: uv
    build-packages: [git]
    build-snaps: [astral-uv]
    override-build: |
      craftctl default
      git describe --always > $CRAFT_PART_INSTALL/version

charm-libs:
  - lib: "tls_certificates_interface.tls_certificates"
    version: '3'
  - lib: "observability-libs.cert_handler"
    version: '1'
  
containers:
  metrics-proxy:
    resource: metrics-proxy-image

config:
  options:
    ready-timeout:
      type: int
      default: 100
      description: >
        The maximum time (in seconds) to wait for the gateway deployment to be 
        ready. This applies specifically to the deployment/LB created for the Istio 
        gateway controller. If the deployment does not become ready within this time, 
        charm will go into blocked state.
    external_hostname:
      description: |
        The DNS name to be used by Istio ingress.
        If unspecified, the gateway ingress ip address will be used, e.g,
        as provided by MetalLB. This needs to be a `bare` hostname: i.e. 
        no schema prefix and no port.
        Hostname can be “precise” which is a domain name without the terminating dot of a network host (e.g. “foo.example.com”).
        It's also important to note that domain name prefixed with a single wildcard label (e.g. *.example.com) isn't supported for now.
      type: string

peers:
  peers:
    interface: istio_ingress_k8s_peers

provides:
  ingress:
    interface: ingress
    description: |
      Provides ingress-like routing to the related Juju application, load-balancing across all units.  If the ingress
      has authentication configured, all paths will have authentication applied to them.  Otherwise, the paths will be
      unauthenticated.  
      Note that if more than one application related to either `ingress` or `ingress-unauthenticated` asks for an 
      ingress of the same path, no route is created and the charm will go into a blocked state.
  ingress-unauthenticated:
    interface: ingress
    description: |
      Provides ingress-like routing to the related Juju application, similar to the `ingress` relation.  Unlike
      the `ingress` relation, paths ingressed here will never have authentication applied to them, even if the ingress
      has authentication configured.
      Note that if more than one application related to either `ingress` or `ingress-unauthenticated` asks for an 
      ingress of the same path, no route is created and the charm will go into a blocked state.
  metrics-endpoint:
    interface: prometheus_scrape
  istio-ingress-config:
    interface: istio_ingress_config
    limit: 1
    description: |
      Provides an interface for exchanging Istio ingress configuration,
      including external authorizer configuration details.

requires:
  certificates:
    interface: tls-certificates
    limit: 1
    description: |
      Send a CSR to- and obtain a signed certificate from an external CA.
  charm-tracing:
    interface: tracing
    limit: 1
    description: |
      Enables sending charm traces to a distributed tracing backend such as Tempo.
  forward-auth:
    interface: forward_auth
    limit: 1

resources:
  metrics-proxy-image:
    type: oci-image
    description: Metrics Proxy OCI image
    # TODO: change below to point at the correct image once metrics-proxy rock is onboarded
    # see: https://github.com/canonical/oci-factory/issues/268
    upstream-source: docker.io/ibraaoad/metrics-proxy:v0.1.0
